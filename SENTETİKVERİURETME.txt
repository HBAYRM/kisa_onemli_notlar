import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np

# Rastgele veri örneği oluşturma (örneğin, Gaussian dağılımlı rastgele veriler kullanalım)
data = np.random.randn(100, 1)

# Generator modelini oluşturun
generator = models.Sequential([
    layers.Dense(32, activation='relu', input_dim=1),
    layers.Dense(1, activation='linear')
])

# Diskriminator modelini oluşturun
discriminator = models.Sequential([
    layers.Dense(32, activation='relu', input_dim=1),
    layers.Dense(1, activation='sigmoid')
])

# GAN modelini oluşturun
discriminator.compile(loss='binary_crossentropy', optimizer='adam')
discriminator.trainable = False  # Diskriminator eğitimi kapatılır
gan_input = layers.Input(shape=(1,))
x = generator(gan_input)
gan_output = discriminator(x)
gan = models.Model(gan_input, gan_output)
gan.compile(loss='binary_crossentropy', optimizer='adam')

# Eğitim işlemi (GAN'ın eğitimi karmaşıktır ve daha fazla ayrıntı gerektirir)
epochs = 1000
batch_size = 64

for epoch in range(epochs):
    for _ in range(data.shape[0] // batch_size):
        noise = np.random.randn(batch_size, 1)
        generated_data = generator.predict(noise)
        real_data = data[np.random.choice(data.shape[0], batch_size, replace=False)]
        x = np.concatenate([real_data, generated_data])
        y = np.zeros(2 * batch_size)
        y[:batch_size] = 1
        discriminator_loss = discriminator.train_on_batch(x, y)
        
        noise = np.random.randn(batch_size, 1)
        y = np.ones(batch_size)
        generator_loss = gan.train_on_batch(noise, y)
    
    print(f"Epoch {epoch+1}, D Loss: {discriminator_loss}, G Loss: {generator_loss}")

# Eğitilen generator'ı kullanarak sentetik veri üretme
noise_for_generation = np.random.randn(100, 1)
generated_data = generator.predict(noise_for_generation)


# Üretilen verileri bir DataFrame'e dönüştürün
generated_df = pd.DataFrame(data=generated_data, columns=['ColumnName'])  # 'ColumnName' yerine mevcut sütun adınızı kullanın

# Üretilen verilerin ilk birkaç satırını görüntüleyin
print(generated_df.head())

# Üretilen verileri mevcut verilerle birleştirin (varsayılan olarak satır bazında birleştirme yapılır)
combined_df = pd.concat([veriler, generated_df], axis=0)
